# location [ = | ~ | ~* | ^~ ] uri { ... }

# =  精确匹配。优先级最高
# ^~ 前缀匹配，优先级其次
# ~  正则匹配，优先级再次 (~* 只是不区分大小写，不单列)
# /  通用前缀匹配，优先级再次

server {
    listen       80;
    server_name  localhost;

    root   /usr/share/nginx/html;
    index  index.html index.htm;

    # 主要是为了匹配 sheng 该路径，因为没有后缀名，无法确认其 content-type，会自动下载
    # 因此这里采用 text/plain，则不会自动下载
    default_type text/plain;

    location / {
      expires -1;

      add_header X-Hello Jacky;
      add_header X-Config A;
      # try_files  $uri $uri.html $uri/index.html /index.html;  
    }

    # http://localhost:8003/test1           ok
    # http://localhost:8003/test1/          ok
    # http://localhost:8003/test18          ok
    # http://localhost:8003/test28          not ok
    location /test1 {
      add_header X-Config B;
      # 可通过查看响应头来判断是否成功返回
      proxy_pass http://api:3000;
    }

    # http://localhost:8003/test2           ok
    # http://localhost:8003/test2/          not ok
    # http://localhost:8003/test28          not ok
    location =/test2 {
      # 可通过查看响应头来判断是否成功返回, 执行 curl --head xxx地址
      add_header X-Config C;
      proxy_pass http://api:3000;
    }

    # http://localhost:8003/test3           ok
    # http://localhost:8003/test3/          ok
    # http://localhost:8003/test38          ok
    # http://localhost:8003/hellotest3      ok
    location ~ .*test3.* {
        # 可通过查看响应头来判断是否成功返回 
        add_header X-Config D;
        proxy_pass http://api:3000;
    }

    # http://localhost:8003/test4           ok
    # http://localhost:8003/test4/          ok
    # http://localhost:8003/test48          ok
    # http://localhost:8003/test28          not ok
    location ^~ /test4 {
        # 可通过查看响应头来判断是否成功返回
        add_header X-Config E;
        proxy_pass http://api:3000;
    }
}